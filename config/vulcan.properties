#Vulcan configuration
AutomatedTestType    = Functional/Cross-Browser/Performance
FrameworkType        = Selenium-WAF/UFT
VersionControl       = GitHub/SVN
GitHubRepositoryURL  = 
DependencyManager    = Maven/Gradle
TestSuiteOptions     = Java
ProfileOptions       = Custom Profile
MavenOptions         = -PRunWAFTests -DEnvironment=https://url
			         = Dtesting.suite.file=name of xml file
			         = Ddriver.name=chromeRemoteDriver - Dvm.count =10
JavaListeners        = 
RunType              = Grid multiple executor
Run                  = Once
TestExecutionName    = Regression
JobOwnersToBeNotified= Email address

#Java/Maven installation
1=download java and maven 
2=vim ~/.bash_profile ->edit the path of java
3=press i to make in insert mode 
4=export JAVA_HOME=$(/usr/libexec/java_home) ->and press esc and then ->enter :wq
5=source ~/.bash_profile -> to update the changes in bash profile
6=echo $JAVA_HOME ->to confirm java home is configured
7=/usr/libexec/java_home ->to get the java path or mvn -version
8=mv apache-maven-3.6.3 /Applications/ ->move maven from downloads to applications folder
9=open -e .bash_profile ->to open bash profile file
10=export M2_HOME=/Applications/apache-maven-3.6.3
11=export PATH=$PATH:$M2_HOME/bin

#Connect new project to Github:
1=Open cmd from the project.
2=git config --global user.email "emailaddress"
3=git config --global user.name "username"
4=git init - initialize the project
5=git remote add origin url of the github repository 
6=git add . 
7=git commit -m"message"
8=git push origin master or git push origin master --force
9=git branch --set-upstream-to=origin/master master
10=git pull
#Switch branch
11=git fetch
12=git checkout branchname
#Revert untracked files
13=git reset --hard or git clean -xdf
14=git merge origin/merging branch -- to merge branch with master

#Jenkins configuration
1=Download Generic Java package(.war)
2=Java -jar jenkins.war -httpPort=8080 in cmd prompt from jenkins war file location
3=Manage Jenkins ->Global Tool Configuration -> configure JDK and Maven(pass name and path) ->Save
4=Create a new job
5=Project name ->Advanced ->Use custom workspace ->Directory -$(JENKINS_HOME)/projectname /Alternative-SCM
6=Copy the project under .jenkins folder 
7=Source Code Management ->Git(url of github repository
8=MINUTES(0-59),HOURS(0-23),DAYMONTH(1-31),MONTH(1-12),DAYWEEK(0-7) to run job periodically
9=Build Triggers ->Build periodically ->Schedule
10=Build ->Invoke top-level Maven targets ->Maven Version and Goals -mvn test or mvn test -PRegression
11=Install TestNG Results Plugin
12=Post-build Actions ->Publish TestNG Results ->TestNG XML report pattern -**/testng-results.xml

#Linux command
1=pwd ->present working directory
2=ls ->to see all folders
3=sudo su -  ->to go to root user
4=ls -a  ->to see all hidden files
5=yum remove java -> to remove java 
6=yum install java-1.8.0-openjdk-devel 
7=cat .bash_profile ->to display contents of file(i.e. .bash_profile)
8=cd .. ->to go to the file one step back
9=vi .bash_profile ->edit the file(i.e. .bash_profile)
10=press i ->to make file in insert mode and enter JAVA_HOME or MAVEN_HOME=path of java/maven, press esc, enter :wq to save the change, q! to quite without save
11=wget paste the link of maven -> to download maven
12=tar xzvf apache-maven-3.6.3-bin.tar.gz ->to unzip the file
13=cd root ->to go to root folder
14=cp -r apache-maven-3.6.3 /opt ->copy maven to opt folder
15=echo $JAVA_HOME ->to go to the location of JAVA

#API
1=BaseUrl/resource/(path/query)parameters -> end point url





