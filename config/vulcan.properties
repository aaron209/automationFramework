#Vulcan configuration
AutomatedTestType    = Functional/Cross-Browser/Performance
FrameworkType        = Selenium-WAF/UFT
VersionControl       = GitHub/SVN
GitHubRepositoryURL  = 
DependencyManager    = Maven/Gradle
TestSuiteOptions     = Java
ProfileOptions       = Custom Profile
MavenOptions         = -PRunWAFTests -DEnvironment=https://url
			         = Dtesting.suite.file=name of xml file
			         = Ddriver.name=chromeRemoteDriver - Dvm.count =10
JavaListeners        = 
RunType              = Grid multiple executor
Run                  = Once
TestExecutionName    = Regression
JobOwnersToBeNotified= Email address

#Java/Maven installation
1=download java and maven 
2=vim ~/.bash_profile ->edit the path of java
3=press i to make in insert mode 
4=export JAVA_HOME=$(/usr/libexec/java_home) ->and press esc and then ->enter :wq
5=source ~/.bash_profile -> to update the changes in bash profile
6=echo $JAVA_HOME ->to confirm java home is configured
7=/usr/libexec/java_home ->to get the java path or mvn -version
8=mv apache-maven-3.6.3 /Applications/ ->move maven from downloads to applications folder
9=open -e .bash_profile ->to open bash profile file
10=export M2_HOME=/Applications/apache-maven-3.6.3
11=export PATH=$PATH:$M2_HOME/bin
12=which java or which mvn -> to find java/mvn location
13=C: Winows ->System32 -> sysdm.cpl -> right click and run as elevated--- to edit the system variables
14=source ~/.bash_profile and then mvn -version

#Connect new project to Github:
1=Open cmd from the project.
2=git config --global user.email "emailaddress"
3=git config --global user.name "username"
#go to the location of the project
4=git init - initialize the project
5=git add . 
6=git commit -m"message"
7=git remote add origin url of the github repository 
8=git push origin master or git push origin master --force
9=git branch --set-upstream-to=origin/master master
10=git pull
#Switch branch
11=git fetch
12=git checkout branchname
#Revert untracked files
13=git reset --hard or git clean -xdf
14=git merge origin/merging branch or git rebase merging branch -- be on master branch to merge branch with master
15=git push origin --delete branchName -- to delete branch remotely
16=git checkout --orphan branchName -- to create empty branch
17=git stash  --pause or save changes(it is done after git add)
18=git stash apply -- bring your saved changes back
19=git branch --show --to display all branches
20=git branch --show-current --to display current branch
21=if git push does not push the changes, the below can be run
22=git pull --rebase             # to retrieve upstream changes, replay yours on top
23=git push --dry-run --verbose origin HEAD:master   # always good idea: dry-runs..
24=git push origin HEAD:master   # actually push current branch head (non-master) to upstream master
25=git log -- get all commit numbers 
26=git revert 'commit number'  -- revert the commit back and git push for pushing the change
#Resolve merge conflict
27=git pull origin master -- pull the latest from branch where we want to merge, be on the branch which 
28=we want merge, then resolve differences in Eclipse
29=git status and then push 
#Rename & Delete branch
30=git branch -a  --gives list of branch
31=git branch -m <newbranchName>  -- rename branch name
32=git push origin --delete <oldbranchName> --deletes the old branch
33=git push origin -u <newbranchName>  -- push the new branch name to server repo
#SSH connection
34=ssh-keygen  and paster the key in SSH key section in github
35=ssh -T git@github.com   --gives authentication for ssh connection
36=git config --global --list  --> to check if global user name and email are configured

#Jenkins configuration
1=Download Generic Java package(.war)
2=Java -jar jenkins.war -httpPort=8080 in cmd prompt from jenkins war file location
3=Manage Jenkins ->Global Tool Configuration -> configure JDK and Maven(pass name and path) ->Save
4=Create a new job
5=Project name ->Advanced ->Use custom workspace ->Directory -$(JENKINS_HOME)/projectname /Alternative-SCM
6=Copy the project under .jenkins folder 
7=Source Code Management ->Git(url of github repository
8=MINUTES(0-59),HOURS(0-23),DAYMONTH(1-31),MONTH(1-12),DAYWEEK(0-7) to run job periodically
9=Build Triggers ->Build periodically ->Schedule
10=Build ->Invoke top-level Maven targets ->Maven Version and Goals -mvn test or mvn test -PRegression
11=Install TestNG Results Plugin
12=Post-build Actions ->Publish TestNG Results ->TestNG XML report pattern -**/testng-results.xml
13=/Users/Shared/Jenkins/Home/secrets/initialAdminPassword ->password for jenkins

#Linux command
1=pwd ->present working directory
2=ls ->to see all folders
3=sudo su -  ->to go to root user
4=ls -a  ->to see all hidden files(ls - listing)
5=yum remove java -> to remove java 
6=yum install java-1.8.0-openjdk-devel 
7=cat .bash_profile ->to display contents of file in CLI(i.e. .bash_profile)
8=head .bash_profile ->to display contents of file in CLI with first ten lines
8=cd .. ->to go to the file one step back (cd-current directory) cd 'My File' - put '' if there is space in the file name
9=cd ~  ->to go back to the home folder directly
10=vi .bash_profile ->edit the file(i.e. .bash_profile)
11=press i ->to make file in insert mode and enter JAVA_HOME or MAVEN_HOME=path of java/maven, press esc, enter :wq to save the change, q! to quite without save
12=wget paste the link of maven -> to download maven
13=tar xzvf apache-maven-3.6.3-bin.tar.gz ->to unzip the file
14=cd root ->to go to root folder
15=cp -r apache-maven-3.6.3 /opt ->copy maven to opt folder
16=echo $JAVA_HOME or echo $MAVEN_HOME ->to go to the location of JAVA/MAVEN
17=exit -> log out
18=which git -> check the user path of git
19=touch filename -> to create new file
20=open filename -> to open the file
21=mkdir folder_name  -> to create a new folder(mkdir-make directory)
22=nano file_name.txt  -> to create a file like txt(Control X to exit and hit Enter to come out)
23=mv file_source target_location  -> to move file such as mv fileName.txt /Users/kishworsubedi/Downloads 
24=cp file_source target_location  -> to copy file such as cp fileName.txt /Users/kishworsubedi/Downloads 
25=rm file_name  -> to remove file
26=rm -r folder_name  -> to remove folder
27=nano file_name.sh  -> to create shell script file
28=sh file_name.sh  -> to run the shell script file
29=cmd + shift + h  -> to open the Users folder on MacOs
31=grep -> searches a specified file and returns all lines in the file containing a specified string
32=grep stringToBeLookeFor fileName
33=ls /Users/kishworsubedi/Downloads/profile/ | grep Kishwor  -> to display all files having file name Kishwor
34=passwd ec2-user -> to create password for ec2-user -need to be in root dir

#API
1=BaseUrl/resource/(path/query)parameters -> end point url

#Search any class in Eclipse
1=Command + Shift + T

#Java Collections
1=List is index based collection of elements. ArrayList(less memory and good reading performance), 
2=Vector(synchronized and slow performance), LinkedList(good modify performance and more memory).
3=Set is unique collection of elements. HashSet(not order, ), TreeSet(sorted on the basis of order, slow), LinkedHashSet(ordered)

#git issue
1=remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead. --issue
2=generate new token from setting > developer setting > personal access token > and use token as password

#browser issue
1=Chrome browser cannot be opened because the developer cannot be verified". "macOS cannot verify that this app is free from malware."
2=go to the location of the project where chrome driver is i.e. resources and run from there

#mysql
1=mysql -u root -p or /usr/local/mysql/bin/mysql -u root -p  in terminal

#zsh: command not found: mvn
1=vim ~/.zshrc
2=:wq!
2=source ~/.bash_profile;

#cypress
1=npm -i init  --> creates package.json file
2=npm install cypress --save -dev  --> installs cypress
3=npx cypress open  --> opens cypress

#mac command
1=Command + Shift + H  --> open the home folder
2=Command + Shift + G  --> go to folder window or usr
